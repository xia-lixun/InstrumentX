/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include "xil_io.h"
#include "xil_mmu.h"
#include "xpseudo_asm.h"
#include "remap_ocm.h"
#include <xil_cache.h>
#include <stdlib.h>
#include <xtime_l.h>

#include "xparameters.h"
#include "xil_exception.h"
#include "sleep.h"

#define GPIO_BASE  0xE000A000
#define GPIO_DIRM  (GPIO_BASE+0x0284)
#define GPIO_MASK_DATA  (GPIO_BASE+0x0010)




#define WORD_SIZE		(4)
#define BLOCK_SIZE		(2048)
#define NUM_CHANNEL		(2)
#define PCM_SIZE		(BLOCK_SIZE * NUM_CHANNEL)
#define MD5_BYTES		(16)
#define PACKET_SIZE		(PCM_SIZE + MD5_BYTES/WORD_SIZE)



// OCM memory used to communicate with CPU0
#define SEMAPHORE_BLOCK_INDEX		(*(volatile u32 *)(0xFFFFFDFC))
#define SEMAPHORE_SEQUENCE_ERROR	(*(volatile u32 *)(0xFFFFFDF8))


#define SEMAPHORE_VAL			(*(volatile u32 *)(0xFFFC0000))		// OCM memory starting address used as semaphore
#define SEMAPHORE_PEND()		while ( SEMAPHORE_VAL == 1 )		// blocking the thread waiting for the flag set
#define SEMAPHORE_POST()		SEMAPHORE_VAL = 1					// clear the flag to signify resource release
#define SEMAPHORE_INIT()		SEMAPHORE_VAL = 0					// clear the flag to signify resource release

typedef struct SharedMem_ {
	volatile u32 *	Base;			// shared memory pointer
	volatile u32 *	Iterator;		// current pointer
	u32 			NumElement;	// number of 32-bit words
} SharedMem_t;

SharedMem_t Shm;


/*
 * Enormous circular buffer for sensory data block queue
 */
typedef struct DramBuffer_ {
	u32 * Base;
	u32 * Iterator;
	s32 BlockIndex;
	u32 NumBlocks;
} DramBuffer_t;

DramBuffer_t Dram;



int main()
{

	// Remap all 4 64KB blocks of OCM to top of memory
	MY_REMAP();

	// Disable L1 cache for OCM
	Xil_SetTlbAttributes(0xFFFC0000,0x04de2);           // S=b0 TEX=b100 AP=b11, Domain=b1111, C=b0, B=b0

	// initialize semaphore to zero, Cortex CPU owns the OCM now
	SEMAPHORE_INIT();


	/**********************************************************
     * mb bootloop
     * If not using FSBL to download Microblaze elf to DDR
     * the reset vector of the Microblaze needs to contain
     * a 'branch to self' in order to provide the Microblaze
     * valid code to run before before the debugger can halt
     * the Microblaze and download the application that 
     * places valid code at the Microblaze's reset vector
     *
     * If using SDK/XMD to download the Microblaze application
     * uncomment the following two lines of code
     **********************************************************/
	Xil_Out32(0x30000000, 0xb8000000);
	Xil_DCacheFlush();

	///////////////////////////////////////////////
	//Take PL out of reset
	//Enable emio bit 0
	Xil_Out32(GPIO_DIRM, 0x1);
	//Set emio[0] to release PL reset
	Xil_Out32(GPIO_MASK_DATA, 0xfffe0001);


	// initialize shared memory
    Shm.Base = (volatile u32 *) 0xFFFC0004;
    Shm.NumElement = (0x0003FE00 - sizeof(u32)) / sizeof(u32);


	xil_printf("Cortex CPU Starts...\n\r");
	while ((Xil_In32(STDOUT_BASEADDRESS + 0x2C) & 0x08) != 0x08);	// Wait until UART TX FIFO is empty


	SEMAPHORE_POST();
	SEMAPHORE_PEND();
	xil_printf("First handshake OK\n\r");


	Dram.NumBlocks = 8192;
	Dram.Base = (u32 *) malloc(sizeof(u32) * PACKET_SIZE * Dram.NumBlocks);
	xil_printf("Malloc address: %x, size %d KB\n\r", Dram.Base, sizeof(u32) * PACKET_SIZE * Dram.NumBlocks / 1024);

	Shm.Iterator = Shm.Base;
	*(Shm.Iterator)++ = (u32) Dram.Base;
	*(Shm.Iterator) = Dram.NumBlocks;

	SEMAPHORE_POST();
	SEMAPHORE_PEND();
	xil_printf("Microblaze CPU: test DRAM...%d\n\r", *(Shm.Base));


	xil_printf("Cortex CPU: test DRAM...");
	u32 DramError = 0;
	memset(Dram.Base, 0xAA, sizeof(u32) * PACKET_SIZE * Dram.NumBlocks);
	Xil_DCacheFlush();
	//Xil_DCacheInvalidate();
	Dram.Iterator = Dram.Base;
	for(int i = 0; i < PACKET_SIZE * Dram.NumBlocks; i++) {
		if( *(Dram.Iterator)++ != 0xAAAAAAAA ) {
			DramError += 1;
		}
	}
	xil_printf("0xAA Error: %d   ", DramError);

	DramError = 0;
	memset(Dram.Base, 0x55, sizeof(u32) * PACKET_SIZE * Dram.NumBlocks);
	Xil_DCacheFlush();
	//Xil_DCacheInvalidate();
	Dram.Iterator = Dram.Base;
	for(int i = 0; i < PACKET_SIZE * Dram.NumBlocks; i++) {
		if( *(Dram.Iterator)++ != 0x55555555 ) {
			DramError += 1;
		}
	}
	xil_printf("0x55 Error: %d \n\r", DramError);



	//COMM_VAL = 1;
	//SEMAPHORE_POST();

	// Microblaze now owns OCM and start testing DRAM
	// Cortex CPU waits for the result
	//while(COMM_VAL == 1);
	//SEMAPHORE_PEND();




    while(1) {

    	//Ocm = (volatile u32 *) 0xFFFC0004;
    	//for(int i = 0; i < MN; i++) {
    	//	OnChipMemBuffer[i] = rand();
    	//	*Ocm = OnChipMemBuffer[i];
    	//	Ocm += 1;
        //	//xil_printf("Ocm address: %x\n\r", Ocm);
        //  }


        //from this point OCM belongs to Microblaze
    	//COMM_VAL = 1;
    	//while(COMM_VAL == 1);
    	//xil_printf("Time benchmark: %d CPU cycles from Microblaze.\n\r", *Ocm);
    	//Xil_DCacheInvalidateRange(0x001480C8, 4);
    	//xil_printf("DRAM Shared: %d OCM: %d\n\r", *((volatile u32 *)0x001480C8), *Ocm);
    	//now OCM belongs to Cortex A9
    	//Ocm = (volatile u32 *) 0xFFFC0004;
    	//for(int i = 0; i < MN; i++) {
    	//	if(*Ocm != OnChipMemBuffer[i]+1) {
    	//		xil_printf("CPU0: mismatch found: %x - %x\n\r", *Ocm, OnChipMemBuffer[i]+1);
    	//	}
    	//	Ocm += 1;
    	//}

		//xil_printf("CPU0: transaction done!\n\r");

    }

    return 0;
}
