/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include <xparameters.h>
#include "xil_types.h"
#include "xil_io.h"
#include "xstatus.h"
#include "xil_printf.h"


//semaphore naming convention:
//sem_master-cpu-id_slave-cpu-id
//master cpu should is responsible for init semaphore value to zero
//semaphore is available for slave cpu when flag is set
//slave cpu must clear flag to return to master once task is done
#define semMBCPU1    (*(volatile u32 *)(0xFFFF0001))





//shared memory sections
//shared OCM memory range [0xFFFF0000 .. 0xFFFFFDFF]    Length=0xFFFFFE00  //65024 bytes or 63KB
//shmMBCPU1 range         [0xFFFF0100 .. 0xFFFF01FF]    Length=0x00000100  //256 bytes
#define shmMBCPU1         (volatile u8 *)(0xFFFF0100)







int main(void)
{

    init_platform();
    semMBCPU1 = 0;

    while(1) {

    	for(int i = 0; i < 256; i++) *(shmMBCPU1+i) = rand() % 256;
    	semMBCPU1 = 1;
    	while(semMBCPU1 == 1) {};
    }

    cleanup_platform();
    return 0;
}



